generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model session {
  id          Int       @id @default(autoincrement())
  userId      Int       
  token       String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)

  user        user?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum UserRoles {
  ADMIN
  MODERATOR
  VISIT
}

model user {
  id            Int         @id @default(autoincrement())
  name          String
  role          UserRoles   @default(VISIT)
  email         String      @unique
  password      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  session                   session[]
  supplier                  supplier[]
  category                  category[]
  items                     item[] 
  subCategory               subCategory[]
  insertedItens             insertedItens[]
  deletedItens              deletedItens[]
  licensePlate              licensePlate[]
}
model category {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  createdBy     Int  
  isActived     Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  user          user?           @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategory   subCategory[]

}
model subCategory {
  id            Int         @id @default(autoincrement())
  name          String
  categoryId    Int
  createdBy     Int  
  isActived     Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user          user?       @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category      category?   @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items         item[] 
}
model item {
  id            Int       @id @default(autoincrement())
  name          String
  description   String
  stock         Int       @default(0)
  lastPrice     Float
  imageId       Int
  subCategoryId Int
  createdBy     Int    
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  enable        Boolean   @default(true)

  image          image?           @relation(fields: [imageId], references: [id])
  user           user?            @relation(fields: [createdBy], references: [id])
  subCategory    subCategory      @relation(fields: [subCategoryId], references: [id])
  insertedItens  insertedItens[]
}



model insertedItens {
  id                      Int       @id @default(autoincrement())
  itemId                  Int       @map(name: "itemId")
  price                   Float
  supplierId              Int
  insertedQuantity        Float
  remainingQuantity       Float
  receiptBill             String? 
  receiptBillEmissionDate String? 
  createdBy               Int    
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  enable                  Boolean   @default(true)

  item             item?        @relation(fields: [itemId], references: [id])
  user             user?        @relation(fields: [createdBy], references: [id])
  supplier         supplier?    @relation(fields: [supplierId], references: [id])

  deletedItens               deletedItens[]
}

model deletedItens {
  id               Int       @id @default(autoincrement())
  insertId         Int
  licenseId        Int
  deletedQuantity  Float
  deletedBy        Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  licensePlate     licensePlate   @relation(fields: [licenseId], references: [id])
  insertedItem     insertedItens  @relation(fields: [insertId], references: [id])
  user             user           @relation(fields: [deletedBy], references: [id])
}


model image {
  id                  Int         @id @default(autoincrement())
  imageUrl            String
  imageName           String
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  item                item[]
}
model licensePlate {
  id              Int       @id @default(autoincrement())
  license         String    @unique
  createdBy       Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user           user?       @relation(fields: [createdBy], references: [id])

  deletedItens   deletedItens[]
}
model supplier {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  createdBy       Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            user?     @relation(fields: [createdBy], references: [id])

  insertedItens   insertedItens[]
}

